//INCLUDES
#include <SPI.h>
#include <SD.h>
//ARRAYSIZE & POSICION
long arraySize = 9;                                                                                     //726; //cantidad de fijaciones
long n = 1;
long m = 0;
//TAMAÑO DE TEXTO. PX
const int minX_Izq = 0;
const int maxX_Izq = 33071;
//variables para utilizar la memoria SD
File myFileX, myFileY, punX, punY;//archivos de texto
unsigned long punteroX = 0;
unsigned long punteroY = 0;
boolean flag_posAntX = true;
boolean flag_posAntY = true;
int r = 0;
//CALCULO DE FACTOR
/* 2,85 mt  ancho de formato de texto.
   10.0000 pasos son 5CM.                                       (de motor paso a paso de brida 28mm con acople de 5mm  y varilla roscada de X mm )
   como convertir pixeles a pasos:
  (2850mm(ancho de formato de texto)* 10000pap/ 50mm)/ 33071px(ancho en pixeles) = f
  (2850mm(ancho de formato de texto)* 10000pap/ 50mm)= 570000 (cantidad de pasos necesarios para recorrer el ancho del formato del texto)
  25646,16 / 33071= 17.2 = f
*/
float f = 17.2;                                                                                        
// POSICIONES & PASOS
long posX_Izq = 0;                                                                                  
long posX_Der = 0;
long posXpasos = 0;
long posYpasos = 0;
long posAntX = 0; //PosX del anterior loop
long posAntY = 0; //PosY del anterior loop
//PASOS REALIZADOS.
long counterX_Izq = 0;
long counterX_Der = 0;
// MOTOR DERECHA - FIJO
const int reset_Der = 4;
const int steps_Der = 2;
const int dir_Der = 22;
// MOTOR IZQUIERDA - VARIABLE
int reset_Izq = 7;
int steps_Izq = 5;
int dir_Izq = 6;
// MOTOR Z IZQUIERDA - VARIABLE
int reset_Z_Izquierda = 10;
int steps_Z_Izquierda = 9;
int dir_Z_Izquierda =  8;
// MOTOR Z DERECHA - FIJO
const int reset_Z_Derecha =  13;
const int steps_Z_Derecha =  12;
const int dir_Z_Derecha =    11;
// STEPS
const unsigned long stepsMotorErase = 800;                                                      // Pasos de borrado
const unsigned long stepsZ = 1000;                                                              //Pasos del movimiento en Z
// THRS, TIMERS & SPEEDS
const int velocity =  450;                                                                      //Velocity por defecto.
const int velocity_Izquierda =  150;                                                            //Velocity a la IZQ
const int velocityErase = 850;                                                                  //Velocity de borrado (lento)
const int velocityZ = 650;                                                                      //Velocity Z
const int speedFZ = 450;                                                                        //Velocity FindZero
const int timer = 100;                                                                          //Timer uso general
const int threshold =   8;                                                                      //Threshold de sensores efecto hall.
// Fines de carrera
int sensorValueA0;
int sensorValueA1;
int sensorValueA2;
int sensorValueA3;
//FLAGS TRIGGERS
int flag = LOW;
int flagFindZero = HIGH;                                                                        //LOW evita la busqueda de zero.
int flagEndX_1 = LOW;
int flagEndX_2 = LOW;
// LEDS
const int pinLed1 = 40;
const int pinLed2 = 41;
// SETTINGS
void setup() {
  pinMode(reset_Izq, OUTPUT);
  pinMode(steps_Izq, OUTPUT);
  pinMode(dir_Izq, OUTPUT);
  pinMode(reset_Der, OUTPUT);
  pinMode(steps_Der, OUTPUT);
  pinMode(dir_Der, OUTPUT);
  pinMode(pinLed1, OUTPUT);
  pinMode(pinLed2, OUTPUT);
  pinMode(reset_Z_Izquierda, OUTPUT);
  pinMode(steps_Z_Izquierda, OUTPUT);
  pinMode(dir_Z_Izquierda, OUTPUT);
  pinMode(reset_Z_Derecha, OUTPUT);
  pinMode(steps_Z_Derecha, OUTPUT);
  pinMode(dir_Z_Derecha, OUTPUT);
  digitalWrite(pinLed1, LOW);
  digitalWrite(pinLed2, LOW);
  //memoria SD
  Serial.begin(9600);
  Serial.println("Inicializando SD...");

  if (SD.begin()) {                                                                           //Disponibilidad de memoria SD
    Serial.println("Lecturas de tarjeta SD :  OK");
    setPuntero();
    //getPunteroX();
    //getPunteroY();
  }
  else {
    Serial.println("ERROR: No encuentra archivo");
  }
   Serial.println(" Buscando posicion X = 0 ");
}

void loop() {
  if (flagFindZero == HIGH) {
    findZero();
 }
  sensorValueA2 = digitalRead(A2);   //PUENTE          - DER a IZQ     [DER A IZQ]
  sensorValueA3 = digitalRead(A3);   //Fin de carrera  - DER a IZQ     [EXTREMO DERECHO]
  borrar();
}


void findZero() {
  sensorValueA0 = analogRead(A0);   //PUENTE          - IZQ a DER     [IZQ A DER]
  sensorValueA1 = analogRead(A1);   //Fin de carrera  - IZQ a DER     [EXTREMO IZQUIERDO]
  boolean moverIzq = false;
  boolean moverDer = false;
  //Fines de carrera.
  if (sensorValueA0 >  threshold)     {
    flagEndX_1 = LOW;
    turnOn();
    moverIzq = true;
  }
  if (sensorValueA0 <  threshold)     {
    flagEndX_1  = HIGH;
    turnOff();
    moverIzq = false;
  }
  //FIN DE CARRERA EJE X. DERECHA
  if (sensorValueA1 >  threshold)   {
    flagEndX_2 = LOW;
    turnOn_2();
    moverDer = true;
  }
  if (sensorValueA1 <  threshold)   {
    flagEndX_2 = HIGH;
    turnOff_2();
    moverDer = false;
  }
  if ((moverDer == true) && (moverIzq == true)) {             // 2 motores juntos.
    digitalWrite(dir_Der, HIGH);
    moveMotorXY();
  } else {                                                    //Por separado.
    if (moverDer = true) {
      left();
    }
    if (moverIzq = true) {
      left_2();
    }
    if ((flagEndX_1 == HIGH) && (flagEndX_2 == HIGH))  {
      flagFindZero = LOW;
      delay(500);
      Serial.println(" Se encontro posicion X = 0 ");
      Serial.println("                             ");
      Serial.println(" Comenzando lecturas. ");
      Serial.println("                             ");
      digitalWrite(pinLed1, HIGH);
      delay(timer);
      digitalWrite(pinLed1, LOW);
      delay(timer);
      digitalWrite(pinLed2, HIGH);
      delay(timer);
      digitalWrite(pinLed1, LOW);
      delay(timer);
      digitalWrite(pinLed1, HIGH);
      delay(timer);
      digitalWrite(pinLed1, LOW);
      delay(timer);
      digitalWrite(pinLed2, HIGH);
      delay(timer);
      digitalWrite(pinLed2, LOW);
      delay(timer);
    }
  }
}

void setPuntero() {                                       //cada vez que arranca se fija en cuanto quedó el puntero de cada archivo
  punX = SD.open("punteroX.txt", FILE_WRITE);
  punX.seek(0);                                           //me posiciono en el inicio del archivo
  punX.print(punteroX);                                   //escribe la nueva posicion del puntero
  Serial.println("                             ");
  Serial.print(" punteroX: ");
  Serial.print(punteroX);
  Serial.println("                             ");
  punX.close();

  //  punY = SD.open("punteroY.txt", FILE_WRITE);
  //  punY.seek(0);//me posiciono en el inicio del archivo
  //  punY.print(punteroY);//escribe la nueva posicion del puntero
  //  Serial.print(", punteroY: ");
  //  Serial.println(punteroY);
  //  punY.close();//guarda y cierra el archivo
}

void getPunteroX() {                                  //obtengo el lugar del punteroX
  punX = SD.open("punteroX.txt", FILE_READ);          //abro el archivo
  punX.seek(0);                                       //me posiciono en el inicio
  punteroX = punX.parseInt();                         //agarro la primer posicion
  Serial.print(" get punteroX: ");
  Serial.print(punteroX);
  punX.close();                                       //cierro el archivo
}

//void getPunteroY() {//obtengo el lugar del punteroY
//  punY = SD.open("punteroY.txt", FILE_READ);//abro el archivo
//  punY.seek(0);//me posiciono en el inicio
//  punteroY = punY.parseInt();//agarro la primer posicion
//  Serial.print(" get punteroY: ");
//  Serial.print(punteroY);
//  punY.close();//cierro el archivo
//}

void arrayReadSD() {                                  //obtengo posiciones de la tarjeta SD
  Serial.println("Entrando a arrayReadSD()");
  //solo hago getPuntero() si se cortó la luz
  //getPunteroX();//obtengo la ultima posicion del punteroX
  myFileX = SD.open("x1.txt", FILE_READ);//abro el archivo de fijaciones en X
  myFileX.seek(punteroX);//posiciono el puntero
  if (myFileX.available() > 0) {//me fijo
    Serial.print(" Entrando al archivo X");
    if (flag_posAntX) { //si es la primera, agarro la primera como anterior
      myFileX.seek(0);
      posAntX = myFileX.parseInt();//agarro la posicion inicial, para hacer el calculo
      flag_posAntX = false;//flag para hacerlo solo la primera vez
    }
    posX_Izq = myFileX.parseInt(); //separa los numeros y lo guarda en posX
    punteroX = myFileX.position(); //agarra la posicion actual

    myFileX.close();
    Serial.print(" punteroX: ");
    Serial.print(punteroX);
    Serial.print(", valAntX: ");
    Serial.print(posAntX);
    Serial.print(", valX: ");
    Serial.println(posX_Izq);

  } else { //si terminó de leer el archivo
    Serial.println("termino el archivo");
    punteroX = 0;//me posiciono de vuelta en 0
    myFileX.close();//guardo y cierro
    flag_posAntX = true;
    //ACA ES Q RESETO QUE TERMINÓ DE LEER EL ARCHIVO
    n = arraySize - 1;
  }

  posXpasos = (posX_Izq - posAntX) * f;//variable con la cantidad de pasos de motor
  //posXpasos = (posAntX - posX) * f;
  posAntX = posX_Izq; //actualizo el valor anterior
  /*
    r++;//guardar cada tanto el puntero
    if (r > 10) { //guardo el puntero cada X fijaciones
    setPuntero();//actualizo los punteros
    r = 0;
    } */
}


void borrar() {
  if (flagFindZero == LOW) {
    if (flag == LOW) {
      arrayReadSD();
      //secuencia de encendido()
      digitalWrite(reset_Izq, HIGH);
      digitalWrite(reset_Der, HIGH);
      flag = HIGH;
    }
    //movimiento de motores en X Y X2
    if (flag == HIGH) {                           //Motor de la izquierda
      if (posXpasos > 0) {                       //hacia la izquierda
        if (counterX_Izq < posXpasos) {
          moveMotor(steps_Izq, velocity);         //Move
          if (sensorValueA3 == LOW) {
            reset_Izq = 4;
            steps_Izq = 2;
            dir_Izq = 22;
            digitalWrite(dir_Izq, HIGH);
          } else if (sensorValueA3 == HIGH ) {
            digitalWrite(dir_Izq, LOW);
            reset_Izq = 7;
            steps_Izq = 5;
            dir_Izq = 6;
          }
          counterX_Izq++;
        }
      }
      //hacia la derecha.
      else if (posXpasos < 0) {                    
       
        if (counterX_Izq < (-posXpasos)) {
          moveMotor(steps_Izq, velocity);
          if (sensorValueA2 == LOW) {
            reset_Izq = 4;
            steps_Izq = 2;
            dir_Izq = 22;
            digitalWrite(dir_Izq, LOW);
          } else if (sensorValueA2 == HIGH) {
            digitalWrite(dir_Izq, HIGH);
            reset_Izq = 7;
            steps_Izq = 5;
            dir_Izq = 6;
          }
          counterX_Izq++;
        }
      }
    }
    if (counterX_Izq == abs(posXpasos)) {
      delay(500);
      eraserZDown(steps_Z_Izquierda, dir_Z_Izquierda, reset_Z_Izquierda);
      for (int i = 0; i < 2; i++) {
        eraseMovement(dir_Izq, steps_Z_Izquierda, dir_Z_Izquierda );
      }
      eraserZUp(steps_Z_Izquierda, dir_Z_Izquierda, reset_Z_Izquierda);
      counterX_Izq = 0;
      
      //counterX_Der = 0;
      //m = n;
      //n++;                                                // avanzo una posición en el array
      if (n == arraySize - 1) {                           // tiene que ir -1
       
       //n = 1;
       //m = 0;
        punteroX = 0;
        punteroY = 0;
        flag_posAntX = true;
        flag_posAntY = true;
        flagEndX_1 = LOW;
        flagEndX_2 = LOW;
        flagFindZero = HIGH;
        flag = LOW;
        findZero();
      }
      arrayReadSD();                                       //  nueva lectura
    }
  }
}

void moveMotor(int pinStep, int velocidad) {
  digitalWrite(pinStep, HIGH);
  delayMicroseconds(velocidad);
  digitalWrite(pinStep, LOW);
  delayMicroseconds(velocidad);
}

void eraseMovement(int pinDirX, int pinStepsZ, int pinDirZ) {
  digitalWrite(pinDirX, HIGH);
  delay(10);
  for (unsigned long i = 0; i < stepsMotorErase; i++) {
    functionMoveErase(steps_Izq, velocityErase);
  }
  digitalWrite(pinDirX, LOW);
  delay(10);
  for (unsigned long i = 0; i < stepsMotorErase; i++) {
    functionMoveErase(steps_Izq, velocityErase);
  }
  //digitalWrite(pinDirX, HIGH);
}


void eraserZDown (int pinStepsZ, int pinDirZ, int pinResetZ) {
  digitalWrite(pinResetZ, HIGH);
  digitalWrite(pinDirZ, LOW);
  for (int i = 0; i < stepsZ; i++) {
    moveMotor(pinStepsZ, velocityZ);
  }

}
void eraserZUp (int pinStepsZ, int pinDirZ, int pinResetZ) {
  digitalWrite(pinResetZ, HIGH);
  digitalWrite(pinDirZ, HIGH);
  for (int i = 0; i < stepsZ; i++) {
    moveMotor(pinStepsZ, velocityZ);
  }
}

void right() {
  digitalWrite(dir_Izq, HIGH);
  moveMotor(steps_Izq, velocity);
}
void right_2() {
  digitalWrite(dir_Der, LOW);
  moveMotor(steps_Der, velocity);
}
void left() {
  digitalWrite(dir_Izq, LOW );
  moveMotor(steps_Izq, velocity_Izquierda);
}
void left_2() {
  digitalWrite(dir_Der, HIGH);
  moveMotor(steps_Der, velocity_Izquierda);
}
void functionMoveErase(int pinSteps, int velocidad) {
  digitalWrite(pinSteps, HIGH);
  delayMicroseconds(velocidad);
  digitalWrite(pinSteps, LOW);
  delayMicroseconds(velocidad);
}
void turnOff()  {
  digitalWrite(reset_Izq, LOW);
}
void turnOff_2() {
  digitalWrite(reset_Der, LOW);
}
void turnOn()   {
  digitalWrite(reset_Izq, HIGH);
}
void turnOn_2() {
  digitalWrite(reset_Der, HIGH);
}
void moveMotorXY() {
  digitalWrite(steps_Izq, HIGH);
  digitalWrite(steps_Der, HIGH);
  delayMicroseconds(speedFZ);
  digitalWrite(steps_Izq, LOW);
  digitalWrite(steps_Der, LOW);
  delayMicroseconds(speedFZ);
}
